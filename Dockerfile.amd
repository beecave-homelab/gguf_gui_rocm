###########################################
#### SETUP BASE IMAGE WITH ROCM-6.1.2 ####
###########################################
FROM rocm/dev-ubuntu-22.04:6.1.2 AS rocm-base

# Install essential dependencies and ROCm libraries
RUN apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    sudo wget git cmake rocsparse-dev hipsparse-dev rocthrust-dev rocblas-dev hipblas-dev make build-essential \
    ocl-icd-opencl-dev opencl-headers clinfo \
    rocrand-dev hiprand-dev rccl-dev \
    gcc-11 g++-11 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Set ROCm environment variables
ENV ROCM_PATH=/opt/rocm
ENV HSA_OVERRIDE_GFX_VERSION=10.3.0
ENV LLAMA_HIPBLAS=1
ENV AMDGPU_TARGETS=gfx1030
ENV CC=gcc-11
ENV CXX=g++-11

# Add ROCm binaries to PATH
ENV PATH="${PATH}:/opt/rocm/bin"

#######################################
########## INSTALL PYTHON 3.9 #########
#######################################
FROM rocm-base AS python-setup

# Add deadsnakes PPA and install Python 3.11
# RUN apt-get update && apt-get install -y software-properties-common && \
#     add-apt-repository ppa:deadsnakes/ppa && \
#     apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
#     python3.11 python3.11-dev python3.11-venv python3-pip python3-setuptools python3.11-distutils \
#     curl openssl libssl-dev liblzma-dev libffi-dev libsqlite3-dev \
#     && apt-get clean \
#     && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# # Ensure Python 3.11 is the default python3
# RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1

# Install Python3
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    python3 python3-dev python3-pip python3-venv \
    curl git build-essential cmake gcc \
    libbz2-dev libreadline-dev libsqlite3-dev \
    libncursesw5-dev xz-utils tk-dev libxml2-dev \
    libxmlsec1-dev libffi-dev liblzma-dev \
    libssl-dev zlib1g-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

############################################
#### INSTALL GGUF-GUI DEPENDENCIES #########
############################################
FROM python-setup AS app-setup

# Set up environment variables
ARG ARG_USERNAME="app"
ARG ARG_USER_UID=1337
ARG ARG_USER_GID=$ARG_USER_UID
ENV USERNAME $ARG_USERNAME
ENV USER_UID $ARG_USER_UID
ENV USER_GID $ARG_USER_GID
ENV HOME /app
ENV PATH=/app:/app/llama.cpp:$PATH
ENV PORT=8501

# Create the home directory add a passwordless user.
RUN mkdir -p $HOME && \
    groupadd --gid $USER_GID $USERNAME && \
    adduser --uid $USER_UID --gid $USER_GID $USERNAME --no-create-home --home $HOME --disabled-password --gecos "" && \
    chown -R $USERNAME:$USERNAME $HOME

# Clone repositories
RUN git clone --depth=1 https://github.com/kevkid/gguf_gui.git /app
RUN git clone --depth=1 https://github.com/ggerganov/llama.cpp.git /app/llama.cpp

COPY requirements.txt /app/requirements.txt
COPY requirements-rocm.txt /app/requirements-rocm.txt
COPY entrypoint.sh /app/entrypoint.sh

# Create entrypoint script
RUN curl https://pyenv.run | bash && \
    mkdir -p /app/.pyenv && \
    echo 'export PYENV_ROOT="/app/.pyenv"' >> /app/.bashrc && \
    echo 'export PATH="/app/.pyenv/bin:$PATH"' >> /app/.bashrc && \
    echo 'eval "$(pyenv init -)"' >> /app/.bashrc && \
    . /app/.bashrc && \
    /app/.pyenv/bin/pyenv install 3.11 && \
    /app/.pyenv/bin/pyenv global 3.11 && \
    /app/.pyenv/shims/python -m venv /app/.venv && \
    chmod +x /app/entrypoint.sh

# Install Python dependencies
RUN . /app/.venv/bin/activate && \
    pip install --upgrade pip && \
    pip install -r /app/requirements.txt && \
    pip install -r /app/requirements-rocm.txt

# Build llama.cpp with ROCm support
RUN cd /app/llama.cpp && \
    HIPCXX="$(hipconfig -l)/clang" HIP_PATH="$(hipconfig -R)" \
    cmake -S . -B build -DGGML_HIP=ON -DAMDGPU_TARGETS=gfx1030 -DCMAKE_BUILD_TYPE=Release \
    && cmake --build build --config Release -- -j 16 && cd ..

##########################################
#### FINAL SETUP FOR GGUF-GUI APP ########
##########################################
FROM app-setup AS gguf-gui-final

# Set the working directory
WORKDIR $HOME

# Set up volume and port
VOLUME [ "$HOME/models" ]
EXPOSE $PORT

# Run the application
CMD [ "/app/entrypoint.sh", "streamlit", "run", "main.py", "--browser.serverAddress", "0.0.0.0" ]
